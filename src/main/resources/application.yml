server:
  port: 8099

mybatis-plus:
  mapper-locations: classpath*:/mapper/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.none.sharding.domain.entity
spring:
  application:
    name: sharding
  shardingsphere:
    datasource:
      names: ds0
      ds0:
        url: jdbc:mysql://localhost:3306/order
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
    sharding:
      defaultDataSourceName: ds0  #默认数据源，即不需要分库分表的表查询时会默认使用ds0数据库
      tables:
        t_address:  #t_address
          key-generator-column-name: id  #主键 通过雪花算法生成
          actual-data-nodes: ds0.t_address${0..1}    #数据节点,数据库中t_address0，t_address1
          table-strategy:  #分表策略
            inline: #行表达式
              sharding-column: id #分表字段为id
              algorithm-expression: t_address${id % 2} #分表算法为求余

        t_user_order:
          key-generator-column-name: id  #主键
          actual-data-nodes: ds0.t_user_order${0..2}    #数据节点,均匀分布
          table-strategy:  #分表策略
            inline:
              sharding-column: id
              algorithm-expression: t_user_order${id % 3}
    props:
      sql.show: true #显示原sql以及解析生成的实际sql
      allow.range.query.with.inline.sharding: true  #支持范围查询例如大于、小于、between；