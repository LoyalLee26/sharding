server:
  port: 8099

mybatis-plus:
  mapper-locations: classpath*:/mapper/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.example.sharding.entity
  # 枚举属性自动转换，支持统配符 * 或者 ; 分割
  #  typeEnumsPackage: com.stylefeng.guns.modular.*.model.enums
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 0
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #mp2.3+ 全局表前缀 mp_
    #table-prefix: mp_
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    capital-mode: true
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    jdbc-type-for-null: 'null'
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#mybatis:
#  mapper-locations: classpath:mapper/*.xml
#  type-aliases-package: com.example.sharding.entity
spring:
  application:
    name: sharding
  shardingsphere:
    datasource:
      names: ds0
      ds0:
        url: jdbc:mysql://localhost:3306/test
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
    sharding:
      tables:
        t_user:  #t_user表
          key-generator-column-name: id  #主键
          actual-data-nodes: ds0.t_user${0..1}    #数据节点,均匀分布
          table-strategy:  #分表策略
            standard:
              sharding-column: sex
              precise-algorithm-class-name: com.example.sharding.shardingAlgorithm.UserShardingAlgorithm
              range-algorithm-class-name: com.example.sharding.shardingAlgorithm.UserShardingAlgorithm
        t_address:  #t_address
          key-generator-column-name: id  #主键
          actual-data-nodes: ds0.t_address${0..1}    #数据节点,均匀分布
          table-strategy:  #分表策略
#            standard:
#              sharding-column: id
#              precise-algorithm-class-name: com.example.sharding.shardingAlgorithm.UserShardingAlgorithm
#              range-algorithm-class-name: com.example.sharding.shardingAlgorithm.UserShardingAlgorithm
            inline:
              sharding-column: id
              algorithm-expression: t_address${id % 2}

        t_account:
          key-generator-column-name: id  #主键
          actual-data-nodes: ds0.t_account${2020..2021}${0..1}    #数据节点,均匀分布
          table-strategy:  #分表策略
            standard:
              sharding-column: id
              precise-algorithm-class-name: com.example.sharding.shardingAlgorithm.UserShardingAlgorithm

      defaultDataSourceName: ds0
      bindingTables: t_user
    props:
      sql.show: true
#      allow.range.query.with.inline.sharding: true